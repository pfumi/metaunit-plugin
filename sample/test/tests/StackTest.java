package tests;

/*Generated by MPS */

import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.ClassRule;
import org.junit.rules.TestRule;
import org.junit.rules.Timeout;
import org.junit.Rule;
import package1.Stack;
import java.util.List;
import java.util.Arrays;
import org.junit.Before;
import org.junit.After;
import org.junit.Test;
import org.junit.Assert;
import org.junit.Ignore;

@RunWith(Parameterized.class)
public class StackTest {

  @ClassRule
  public static final TestRule timeoutClass = new Timeout(2000);
  @Rule
  public final TestRule timeoutTests = new Timeout(500);
  private Stack stack;
  @Parameterized.Parameters
  public static List<Object[]> cycles() {
    return Arrays.asList(new Object[2][]);
  }
  @Before
  public void setUp() {
    stack = new Stack(3);
    int arg = 1;
    stack.push(arg);
  }
  @After
  public void tearDown() {
    stack = null;
  }

  @Test
  public void testIsEmpty() {
    int size = 4;
    Stack stack = new Stack(size);
    boolean argument = false;
    stack.push(argument);
    boolean result_b0a = stack.isEmpty();
    Assert.assertFalse(result_b0a);
    stack.pop();
    boolean result_d0a = stack.isEmpty();
    Assert.assertTrue(result_d0a);
  }
  @Test
  public void testPeek() {
    Stack<Double> stack = new Stack<Double>(2);
    stack.push(0.5);
    stack.push(1.5);
    Double result_a6a = stack.peek();
    Assert.assertEquals("Assure with delta", 1.0, result_a6a, 0.5);
    int result_b6a = stack.size();
    Assert.assertEquals(2, result_b6a);
  }
  @Test
  public void testPop() {
    Object result_a5a = stack.pop();
    Assert.assertNotNull(result_a5a);
    Object result_b5a = stack.pop();
    Assert.assertNull(result_b5a);
    stack.push("test");
    Object result_d5a = stack.pop();
    Assert.assertTrue(result_d5a instanceof String && result_d5a == "test");
  }
  @Ignore("Disabled Test Message")
  @Test(expected = IllegalArgumentException.class)
  public void testPush() {
    stack.push(null);
  }
  @Test(expected = StackOverflowError.class)
  public void testPush1() {
    Stack stack = new Stack(1);
    stack.push("element");
    stack.push(5.5);
  }
  @Test
  public void testPush2() {
    stack.push('A');
    stack.push(new int[]{});
    Object result_c4a = stack.pop();
    Assert.assertTrue(result_c4a instanceof int[]);
    Object result_d4a = stack.pop();
    Assert.assertEquals('A', result_d4a);
  }
  @Test
  public void testSize() {
    int result_a1a = stack.size();
    Assert.assertEquals(1, result_a1a);
    stack.push(1);
    int result_c1a = stack.size();
    Assert.assertNotEquals(1, result_c1a);
    stack.push(2);
    int result_e1a = stack.size();
    Assert.assertEquals(3, result_e1a);
  }
}
